// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sendRpcMsg.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//一对一发送消息
type Send2Client struct {
	SendUserId           string   `protobuf:"bytes,1,opt,name=sendUserId,proto3" json:"sendUserId,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ToUserId             string   `protobuf:"bytes,3,opt,name=toUserId,proto3" json:"toUserId,omitempty"`
	Msgtype              int32    `protobuf:"varint,4,opt,name=msgtype,proto3" json:"msgtype,omitempty"`
	Msg                  string   `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Send2Client) Reset()         { *m = Send2Client{} }
func (m *Send2Client) String() string { return proto.CompactTextString(m) }
func (*Send2Client) ProtoMessage()    {}
func (*Send2Client) Descriptor() ([]byte, []int) {
	return fileDescriptor_b49861dce9b7bf94, []int{0}
}

func (m *Send2Client) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Send2Client.Unmarshal(m, b)
}
func (m *Send2Client) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Send2Client.Marshal(b, m, deterministic)
}
func (m *Send2Client) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Send2Client.Merge(m, src)
}
func (m *Send2Client) XXX_Size() int {
	return xxx_messageInfo_Send2Client.Size(m)
}
func (m *Send2Client) XXX_DiscardUnknown() {
	xxx_messageInfo_Send2Client.DiscardUnknown(m)
}

var xxx_messageInfo_Send2Client proto.InternalMessageInfo

func (m *Send2Client) GetSendUserId() string {
	if m != nil {
		return m.SendUserId
	}
	return ""
}

func (m *Send2Client) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Send2Client) GetToUserId() string {
	if m != nil {
		return m.ToUserId
	}
	return ""
}

func (m *Send2Client) GetMsgtype() int32 {
	if m != nil {
		return m.Msgtype
	}
	return 0
}

func (m *Send2Client) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 返回响应
type Send2ClientReply struct {
	HttpCode             int32    `protobuf:"varint,1,opt,name=httpCode,proto3" json:"httpCode,omitempty"`
	Response             string   `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Send2ClientReply) Reset()         { *m = Send2ClientReply{} }
func (m *Send2ClientReply) String() string { return proto.CompactTextString(m) }
func (*Send2ClientReply) ProtoMessage()    {}
func (*Send2ClientReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b49861dce9b7bf94, []int{1}
}

func (m *Send2ClientReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Send2ClientReply.Unmarshal(m, b)
}
func (m *Send2ClientReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Send2ClientReply.Marshal(b, m, deterministic)
}
func (m *Send2ClientReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Send2ClientReply.Merge(m, src)
}
func (m *Send2ClientReply) XXX_Size() int {
	return xxx_messageInfo_Send2ClientReply.Size(m)
}
func (m *Send2ClientReply) XXX_DiscardUnknown() {
	xxx_messageInfo_Send2ClientReply.DiscardUnknown(m)
}

var xxx_messageInfo_Send2ClientReply proto.InternalMessageInfo

func (m *Send2ClientReply) GetHttpCode() int32 {
	if m != nil {
		return m.HttpCode
	}
	return 0
}

func (m *Send2ClientReply) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func init() {
	proto.RegisterType((*Send2Client)(nil), "Send2client")
	proto.RegisterType((*Send2ClientReply)(nil), "Send2clientReply")
}

func init() { proto.RegisterFile("sendRpcMsg.proto", fileDescriptor_b49861dce9b7bf94) }

var fileDescriptor_b49861dce9b7bf94 = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x65, 0xda, 0xd0, 0xf6, 0x60, 0x08, 0x37, 0x20, 0xab, 0x03, 0xaa, 0x3a, 0x75, 0x0a,
	0x52, 0x99, 0x58, 0x41, 0xa8, 0x02, 0x89, 0xc5, 0x15, 0x0b, 0x1b, 0x8d, 0x4f, 0x26, 0x52, 0x62,
	0x9f, 0x6c, 0x2f, 0xf9, 0x09, 0xfc, 0x6b, 0x64, 0x43, 0xa2, 0xc0, 0x76, 0xdf, 0xbb, 0x7b, 0xcf,
	0x4f, 0x86, 0x32, 0x90, 0xd5, 0x8a, 0xeb, 0xd7, 0x60, 0x2a, 0xf6, 0x2e, 0xba, 0xed, 0x97, 0x80,
	0x8b, 0x23, 0x59, 0xbd, 0xaf, 0xdb, 0x86, 0x6c, 0xc4, 0x1b, 0x80, 0x74, 0xf3, 0x16, 0xc8, 0x3f,
	0x6b, 0x29, 0x36, 0x62, 0xb7, 0x52, 0x13, 0x05, 0x11, 0xe6, 0xf6, 0xa3, 0x23, 0x79, 0x96, 0x37,
	0x79, 0xc6, 0x35, 0x2c, 0xa3, 0xfb, 0x75, 0xcc, 0xb2, 0x3e, 0x32, 0x4a, 0x58, 0x74, 0xc1, 0xc4,
	0x9e, 0x49, 0xce, 0x37, 0x62, 0x57, 0xa8, 0x01, 0xb1, 0x84, 0x59, 0x17, 0x8c, 0x2c, 0xb2, 0x21,
	0x8d, 0xdb, 0x17, 0x28, 0x27, 0x55, 0x14, 0x71, 0xdb, 0xa7, 0xec, 0xcf, 0x18, 0xf9, 0xd1, 0x69,
	0xca, 0x6d, 0x0a, 0x35, 0x72, 0xda, 0x79, 0x0a, 0xec, 0x6c, 0x18, 0xfa, 0x8c, 0xbc, 0x7f, 0x82,
	0xe5, 0xc1, 0x1d, 0xb9, 0xd1, 0xe4, 0xf1, 0x1e, 0xae, 0x0f, 0x14, 0xff, 0x44, 0xff, 0x5c, 0xe1,
	0x65, 0x35, 0x51, 0xd7, 0x57, 0xd5, 0xff, 0xe7, 0x1f, 0x56, 0xef, 0x0b, 0xe3, 0xb9, 0xbe, 0xe5,
	0xd3, 0xe9, 0x3c, 0x7f, 0xd8, 0xdd, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x7b, 0x81, 0x57,
	0x44, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GoSpiderClient is the client API for GoSpider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GoSpiderClient interface {
	// rpc请求 请求的函数 (发送请求参数) returns (返回响应的参数)
	GetSend2ClientResponse(ctx context.Context, in *Send2Client, opts ...grpc.CallOption) (*Send2ClientReply, error)
}

type goSpiderClient struct {
	cc *grpc.ClientConn
}

func NewGoSpiderClient(cc *grpc.ClientConn) GoSpiderClient {
	return &goSpiderClient{cc}
}

func (c *goSpiderClient) GetSend2ClientResponse(ctx context.Context, in *Send2Client, opts ...grpc.CallOption) (*Send2ClientReply, error) {
	out := new(Send2ClientReply)
	err := c.cc.Invoke(ctx, "/GoSpider/GetSend2clientResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoSpiderServer is the server API for GoSpider service.
type GoSpiderServer interface {
	// rpc请求 请求的函数 (发送请求参数) returns (返回响应的参数)
	GetSend2ClientResponse(context.Context, *Send2Client) (*Send2ClientReply, error)
}

// UnimplementedGoSpiderServer can be embedded to have forward compatible implementations.
type UnimplementedGoSpiderServer struct {
}

func (*UnimplementedGoSpiderServer) GetSend2ClientResponse(ctx context.Context, req *Send2Client) (*Send2ClientReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSend2ClientResponse not implemented")
}

func RegisterGoSpiderServer(s *grpc.Server, srv GoSpiderServer) {
	s.RegisterService(&_GoSpider_serviceDesc, srv)
}

func _GoSpider_GetSend2ClientResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Send2Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoSpiderServer).GetSend2ClientResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoSpider/GetSend2ClientResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoSpiderServer).GetSend2ClientResponse(ctx, req.(*Send2Client))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoSpider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "GoSpider",
	HandlerType: (*GoSpiderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSend2clientResponse",
			Handler:    _GoSpider_GetSend2ClientResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sendRpcMsg.proto",
}
